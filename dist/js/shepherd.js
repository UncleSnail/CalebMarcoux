// Ported by Caleb Marcoux from my original program on Khan Academy.
// https://www.khanacademy.org/computer-programming/shepherd-the-game-v-106/5073448501903360
// To preserve authenticity, as little code as possible was changed.
// The sounds were removed because I do not have the rights to copy the audio files here.
// The key pressing behavior was also editted to enable proper embedding and functionality.
// The block colors also had to be converted to work with RGB.
// Removed extra comments to help improve webpage performance.


var paused = false;
var load = 'none';
/*
 * A game by Uncle Snail
 * Graphics created using Tadasheek's awesome graphics creator. https://www.khanacademy.org/computer-programming/square-bit-painter/4962921179119616
 * All game elements were created by me over the last few weeks (as of release).
 * Comment in tips and thanks to be notified.
 */
/*
    Check out the level editor in the "spin-offs"
*/


 //Paste load
/**Paste your load game text here.**/
 //Paste load

/**Note, the save game function may not work properly at the moment. I will try to get that fixed. For now, your game should load properly, but it may not.**/


/*
Don't worry if you save your game that it won't be compatiable with a later version. I have a built in  compatability system, so even if more things are added, it will convert your saved game to the new format on load. If it doesn't load, just let me know.

 FULL LIST OF CONTROLS
 *move : arrows or aswd
 *pause : esc or space
 *Selct item (menu) : space or enter
 *increase speed : x or "."
 *decrease speed : z or ","
 *set speed back to normal: c or "/"
*/



var gameVersion = "1.06";//change so that save game remains compatible.
var MESSAGE = "Check out the level editor in the \"spen-offs\",\nand submit the lvl in \"tips and thanks.\"";
var pixSize=2;
function pixelsToImage(pix,size,width,height) {
    if (width === undefined || height === undefined) {
        if (sqrt(pix.length) === round(sqrt(pix.length))) {
            width = sqrt(pix.length);
            height = sqrt(pix.length);
        } else {return;}
    }
    if (width * height !== pix.length) {return;}
    size = size === undefined ? 1 : size;
    var imag = createGraphics(width*size,height*size);
    imag.background(0,0,0,0);
    imag.noStroke();
    for (var i = 0; i < height; i++) {
        for (var j = 0; j < width; j++) {
            if (pix[j+i*width].length === 4) {
              imag.fill(pix[j+i*width][0],pix[j+i*width][1],pix[j+i*width][2],pix[j+i*width][3]);
            }
            else {
              imag.fill(pix[j+i*width][0],pix[j+i*width][1],pix[j+i*width][2]);
            }
            imag.rect(j*size,i*size,size,size);
        }
    }
    return imag;
};//updated for transparency
var yourTurn;//false after you have pressed to move. True again, after you release.
var blocks = [
	{//0
		walkable : true,
		type : "inactive",
		name : "dirt",
		strength : 0,
		pixels : [[102,94,70],[163,146,102],[163,146,102],[102,94,70],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[177,163,122],[163,146,102],[177,163,122],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[102,94,70],[163,146,102],[177,163,122],[163,146,102],[163,146,102],[163,146,102],[177,163,122],[163,146,102],[177,163,122],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[102,94,70],[177,163,122],[163,146,102],[163,146,102],[177,163,122],[163,146,102],[163,146,102],[177,163,122],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[102,94,70],[177,163,122],[163,146,102],[102,94,70],[177,163,122],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[102,94,70],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[177,163,122],[163,146,102],[177,163,122],[102,94,70],[163,146,102],[163,146,102],[163,146,102],[102,94,70],[163,146,102],[177,163,122],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[177,163,122],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[163,146,102],[177,163,122],[163,146,102],[163,146,102],[163,146,102]]
	},
	{//1
		walkable : true,
		type : "inactive",
		name : "water",
		strength : 0,
		pixels : [[138,211,252],[138,211,252],[138,211,252],[138,211,252],[96,201,252],[82,171,252],[138,211,252],[138,211,252],[138,211,252],[138,211,252],[138,211,252],[96,201,252],[138,211,252],[138,211,252],[138,211,252],[138,211,252],[102,135,252],[96,201,252],[82,171,252],[82,171,252],[138,211,252],[96,201,252],[138,211,252],[82,171,252],[82,171,252],[138,211,252],[138,211,252],[96,201,252],[138,211,252],[138,211,252],[102,135,252],[82,171,252],[96,201,252],[138,211,252],[96,201,252],[82,171,252],[82,171,252],[82,171,252],[138,211,252],[138,211,252],[138,211,252],[96,201,252],[138,211,252],[102,135,252],[138,211,252],[138,211,252],[138,211,252],[138,211,252],[138,211,252],[102,135,252],[138,211,252],[138,211,252],[138,211,252],[138,211,252],[138,211,252],[138,211,252],[82,171,252],[138,211,252],[138,211,252],[138,211,252],[96,201,252],[138,211,252],[102,135,252],[138,211,252],[138,211,252],[96,201,252],[82,171,252],[96,201,252],[96,201,252],[138,211,252],[82,171,252],[82,171,252],[82,171,252],[138,211,252],[138,211,252],[138,211,252],[96,201,252],[138,211,252],[138,211,252],[102,135,252],[138,211,252],[138,211,252],[96,201,252],[96,201,252],[102,135,252],[102,135,252],[138,211,252],[138,211,252],[138,211,252],[138,211,252],[96,201,252],[96,201,252],[138,211,252],[138,211,252],[96,201,252],[138,211,252],[138,211,252],[102,135,252],[138,211,252],[96,201,252]]
	},
	{//2
		walkable : false,
		type : "inactive",
		name : "stone",
		strength : 1,
		pixels : [[196,197,199],[116,116,117],[170,170,172],[170,170,172],[82,82,83],[59,59,60],[116,116,117],[116,116,117],[170,170,172],[196,197,199],[82,82,83],[116,116,117],[116,116,117],[59,59,60],[170,170,172],[82,82,83],[116,116,117],[82,82,83],[82,82,83],[116,116,117],[170,170,172],[82,82,83],[116,116,117],[59,59,60],[59,59,60],[82,82,83],[59,59,60],[116,116,117],[116,116,117],[116,116,117],[196,197,199],[196,197,199],[116,116,117],[116,116,117],[116,116,117],[116,116,117],[82,82,83],[116,116,117],[116,116,117],[170,170,172],[196,197,199],[170,170,172],[170,170,172],[116,116,117],[82,82,83],[82,82,83],[116,116,117],[116,116,117],[170,170,172],[196,197,199],[170,170,172],[170,170,172],[116,116,117],[116,116,117],[82,82,83],[170,170,172],[116,116,117],[116,116,117],[116,116,117],[170,170,172],[82,82,83],[116,116,117],[116,116,117],[170,170,172],[170,170,172],[196,197,199],[170,170,172],[170,170,172],[116,116,117],[116,116,117],[116,116,117],[116,116,117],[82,82,83],[82,82,83],[170,170,172],[170,170,172],[82,82,83],[116,116,117],[116,116,117],[59,59,60],[82,82,83],[82,82,83],[170,170,172],[82,82,83],[116,116,117],[116,116,117],[82,82,83],[82,82,83],[196,197,199],[170,170,172],[170,170,172],[82,82,83],[82,82,83],[116,116,117],[59,59,60],[116,116,117],[170,170,172],[170,170,172],[170,170,172],[196,197,199]]
	},
	{//3
		walkable : false,
		type : "inactive",
		name : "wood",
		strength : 1,
		pixels : [[140,105,76],[103,64,50],[107,83,65],[107,83,65],[103,64,50],[103,64,50],[140,105,76],[78,64,52],[107,83,65],[78,64,52],[140,105,76],[107,83,65],[78,64,52],[107,83,65],[103,64,50],[140,105,76],[107,83,65],[78,64,52],[103,64,50],[107,83,65],[103,64,50],[140,105,76],[103,64,50],[107,83,65],[107,83,65],[140,105,76],[158,104,85],[107,83,65],[158,104,85],[103,64,50],[140,105,76],[103,64,50],[158,104,85],[103,64,50],[140,105,76],[107,83,65],[103,64,50],[103,64,50],[103,64,50],[140,105,76],[107,83,65],[78,64,52],[103,64,50],[103,64,50],[140,105,76],[103,64,50],[103,64,50],[103,64,50],[107,83,65],[103,64,50],[78,64,52],[140,105,76],[103,64,50],[103,64,50],[140,105,76],[103,64,50],[78,64,52],[103,64,50],[140,105,76],[103,64,50],[107,83,65],[140,105,76],[103,64,50],[140,105,76],[140,105,76],[107,83,65],[78,64,52],[158,104,85],[140,105,76],[107,83,65],[140,105,76],[107,83,65],[140,105,76],[140,105,76],[158,104,85],[107,83,65],[103,64,50],[103,64,50],[78,64,52],[107,83,65],[107,83,65],[107,83,65],[140,105,76],[103,64,50],[103,64,50],[107,83,65],[140,105,76],[158,104,85],[78,64,52],[140,105,76],[158,104,85],[107,83,65],[140,105,76],[103,64,50],[78,64,52],[107,83,65],[140,105,76],[107,83,65],[78,64,52],[140,105,76]]
	},
	{//4
		walkable : false,
		type : "inactive",
		name : "box",
		strength : 1,
		pixels : [[173,195,204],[154,114,77],[154,114,77],[120,91,70],[120,91,70],[154,114,77],[154,114,77],[154,114,77],[154,114,77],[82,60,52],[154,114,77],[96,79,62],[129,96,71],[129,96,71],[129,96,71],[129,96,71],[129,96,71],[129,96,71],[82,60,52],[154,114,77],[154,114,77],[129,96,71],[156,110,88],[82,60,52],[156,110,88],[120,91,70],[82,60,52],[120,91,70],[129,96,71],[154,114,77],[154,114,77],[129,96,71],[156,110,88],[96,79,62],[156,110,88],[120,91,70],[82,60,52],[156,110,88],[129,96,71],[120,91,70],[120,91,70],[120,91,70],[156,110,88],[120,91,70],[120,91,70],[156,110,88],[96,79,62],[156,110,88],[129,96,71],[154,114,77],[154,114,77],[129,96,71],[120,91,70],[82,60,52],[120,91,70],[156,110,88],[96,79,62],[156,110,88],[129,96,71],[154,114,77],[120,91,70],[129,96,71],[156,110,88],[96,79,62],[120,91,70],[156,110,88],[88,65,49],[120,91,70],[129,96,71],[154,114,77],[154,114,77],[129,96,71],[156,110,88],[82,60,52],[156,110,88],[156,110,88],[96,79,62],[156,110,88],[129,96,71],[120,91,70],[154,114,77],[82,60,52],[120,91,70],[129,96,71],[129,96,71],[129,96,71],[102,77,59],[129,96,71],[96,79,62],[154,114,77],[96,79,62],[154,114,77],[154,114,77],[120,91,70],[154,114,77],[120,91,70],[154,114,77],[154,114,77],[96,79,62],[82,60,52]]
	},
	{//5
		walkable : false,
		type : "inactive",
		name : "sand",
		strength : 1,
		pixels : [[199,189,158],[168,149,105],[199,189,158],[218,205,158],[199,182,133],[218,205,158],[168,149,105],[218,205,158],[199,182,133],[218,205,158],[199,182,133],[218,205,158],[199,182,133],[199,189,158],[168,149,105],[218,205,158],[218,205,158],[168,149,105],[218,205,158],[168,149,105],[218,205,158],[168,149,105],[218,205,158],[168,149,105],[218,205,158],[168,149,105],[199,182,133],[218,205,158],[218,205,158],[218,205,158],[199,189,158],[218,205,158],[199,182,133],[218,205,158],[168,149,105],[218,205,158],[218,205,158],[199,189,158],[199,182,133],[168,149,105],[168,149,105],[199,182,133],[218,205,158],[199,182,133],[218,205,158],[218,205,158],[168,149,105],[218,205,158],[199,182,133],[218,205,158],[199,189,158],[218,205,158],[218,205,158],[218,205,158],[168,149,105],[218,205,158],[199,189,158],[218,205,158],[218,205,158],[199,182,133],[218,205,158],[218,205,158],[168,149,105],[218,205,158],[218,205,158],[199,189,158],[199,182,133],[218,205,158],[168,149,105],[218,205,158],[168,149,105],[199,182,133],[218,205,158],[199,182,133],[218,205,158],[199,182,133],[218,205,158],[218,205,158],[218,205,158],[168,149,105],[218,205,158],[168,149,105],[218,205,158],[199,189,158],[218,205,158],[218,205,158],[199,182,133],[199,189,158],[168,149,105],[218,205,158],[199,182,133],[218,205,158],[199,182,133],[218,205,158],[168,149,105],[199,189,158],[218,205,158],[168,149,105],[218,205,158],[199,182,133]]
	},
	{//6
		walkable : false,
		type : "inactive",
		name : "iron",
		strength : 3,
		pixels : [[211,212,214],[142,143,144],[113,114,115],[113,114,115],[113,114,115],[113,114,115],[113,114,115],[113,114,115],[142,143,144],[211,212,214],[142,143,144],[116,116,117],[217,218,221],[183,184,186],[183,184,186],[183,184,186],[183,184,186],[183,184,186],[109,110,111],[142,143,144],[113,114,115],[217,218,221],[107,107,108],[158,159,161],[144,145,147],[127,127,129],[107,107,108],[116,116,117],[183,184,186],[113,114,115],[113,114,115],[183,184,186],[144,145,147],[158,159,161],[116,116,117],[127,127,129],[158,159,161],[144,145,147],[183,184,186],[113,114,115],[113,114,115],[183,184,186],[170,170,172],[127,127,129],[158,159,161],[127,127,129],[116,116,117],[144,145,147],[183,184,186],[113,114,115],[113,114,115],[183,184,186],[144,145,147],[116,116,117],[82,82,83],[107,107,108],[116,116,117],[144,145,147],[183,184,186],[113,114,115],[113,114,115],[183,184,186],[144,145,147],[170,170,172],[170,170,172],[107,107,108],[127,127,129],[170,170,172],[183,184,186],[113,114,115],[113,114,115],[183,184,186],[107,107,108],[127,127,129],[170,170,172],[144,145,147],[144,145,147],[116,116,117],[183,184,186],[113,114,115],[142,143,144],[82,82,83],[217,218,221],[183,184,186],[183,184,186],[183,184,186],[183,184,186],[183,184,186],[141,141,143],[142,143,144],[211,212,214],[142,143,144],[113,114,115],[113,114,115],[113,114,115],[113,114,115],[113,114,115],[113,114,115],[142,143,144],[211,212,214]]
	},
	{//7
		walkable : false,
		type : "inactive",
		name : "coin",
		strength : 1,
		pixels : [[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[101,102,79],[91,90,83],[91,90,83],[214,170,104],[214,170,104],[91,90,83],[91,90,83],[101,102,79],[91,90,83],[91,90,83],[91,90,83],[77,71,58],[214,170,104],[252,233,149],[252,233,149],[203,157,109],[77,71,58],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[214,170,104],[254,248,165],[252,233,149],[171,153,99],[171,153,99],[203,157,109],[91,90,83],[91,90,83],[91,90,83],[214,170,104],[254,248,165],[252,233,149],[185,172,127],[185,172,127],[171,153,99],[207,185,120],[203,157,109],[91,90,83],[91,90,83],[214,170,104],[252,233,149],[252,233,149],[185,172,127],[185,172,127],[185,172,127],[207,185,120],[203,157,109],[91,90,83],[91,90,83],[91,90,83],[203,157,109],[252,233,149],[185,172,127],[185,172,127],[207,185,120],[203,157,109],[91,90,83],[91,90,83],[91,90,83],[101,102,79],[77,71,58],[203,157,109],[207,185,120],[207,185,120],[203,157,109],[77,71,58],[91,90,83],[91,90,83],[91,90,83],[101,102,79],[91,90,83],[91,90,83],[203,157,109],[203,157,109],[91,90,83],[91,90,83],[101,102,79],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83],[91,90,83]]
	},
	{//8
		walkable : false,
		type : "inactive",
		name : "time",
		strength : 1,
		pixels : [[91,90,83],[91,90,83],[147,153,134],[147,153,134],[147,153,134],[147,153,134],[124,129,113],[124,129,113],[91,90,83],[91,90,83],[91,90,83],[116,121,106],[91,90,83],[91,90,83],[203,157,109],[203,157,109],[91,90,83],[91,90,83],[116,121,106],[91,90,83],[147,153,134],[91,90,83],[77,71,58],[203,157,109],[158,164,144],[187,195,171],[203,157,109],[86,101,103],[91,90,83],[147,153,134],[147,153,134],[91,90,83],[203,157,109],[187,195,171],[158,164,144],[187,195,171],[86,101,103],[203,157,109],[91,90,83],[147,153,134],[147,153,134],[203,157,109],[158,164,144],[187,195,171],[125,144,117],[86,101,103],[187,195,171],[158,164,144],[203,157,109],[124,129,113],[124,129,113],[203,157,109],[158,164,144],[187,195,171],[86,101,103],[102,119,122],[187,195,171],[158,164,144],[203,157,109],[124,129,113],[124,129,113],[91,90,83],[203,157,109],[187,195,171],[187,195,171],[125,144,117],[102,119,122],[203,157,109],[91,90,83],[124,129,113],[124,129,113],[101,102,79],[77,71,58],[203,157,109],[187,195,171],[158,164,144],[203,157,109],[77,71,58],[91,90,83],[124,129,113],[91,90,83],[116,121,106],[91,90,83],[91,90,83],[203,157,109],[203,157,109],[91,90,83],[91,90,83],[116,121,106],[91,90,83],[91,90,83],[91,90,83],[147,153,134],[124,129,113],[124,129,113],[124,129,113],[124,129,113],[124,129,113],[91,90,83],[91,90,83]]
	},
	{//9
		walkable : false,
		type : "inactive",
		name : "directional",
		strength : 0,
		pixels : [[108,35,33],[108,35,33],[108,35,33],[127,42,39],[127,42,39],[127,42,39],[127,42,39],[108,35,33],[108,35,33],[108,35,33],[108,35,33],[122,52,50],[115,29,26],[144,59,56],[144,59,56],[144,59,56],[144,59,56],[115,29,26],[122,52,50],[108,35,33],[108,35,33],[115,29,26],[139,26,23],[176,22,1],[168,59,52],[168,59,52],[176,22,1],[139,26,23],[115,29,26],[108,35,33],[127,42,39],[144,59,56],[176,22,1],[196,69,61],[176,22,1],[176,22,1],[196,69,61],[176,22,1],[144,59,56],[127,42,39],[127,42,39],[144,59,56],[168,59,52],[176,22,1],[196,69,61],[196,69,61],[176,22,1],[168,59,52],[144,59,56],[127,42,39],[127,42,39],[144,59,56],[168,59,52],[176,22,1],[196,69,61],[196,69,61],[176,22,1],[168,59,52],[144,59,56],[127,42,39],[127,42,39],[144,59,56],[176,22,1],[196,69,61],[176,22,1],[176,22,1],[196,69,61],[176,22,1],[144,59,56],[127,42,39],[108,35,33],[115,29,26],[139,26,23],[176,22,1],[168,59,52],[168,59,52],[176,22,1],[139,26,23],[115,29,26],[108,35,33],[108,35,33],[122,52,50],[115,29,26],[144,59,56],[144,59,56],[144,59,56],[144,59,56],[115,29,26],[122,52,50],[108,35,33],[108,35,33],[108,35,33],[108,35,33],[127,42,39],[127,42,39],[127,42,39],[127,42,39],[108,35,33],[108,35,33],[108,35,33]]
	},
	{//10
		walkable : false,
		type : "inactive",
		name : "enemy",
		strength : 0,
		pixels : [[108,35,33],[108,35,33],[108,35,33],[127,42,39],[127,42,39],[127,42,39],[127,42,39],[145,33,30],[172,39,35],[213,49,44],[108,35,33],[122,52,50],[115,29,26],[144,59,56],[144,59,56],[144,59,56],[119,27,24],[119,27,24],[119,27,24],[172,39,35],[108,35,33],[115,29,26],[139,26,23],[176,22,1],[168,59,52],[119,27,24],[214,49,44],[214,49,44],[119,27,24],[145,33,30],[127,42,39],[144,59,56],[176,22,1],[196,69,61],[119,27,24],[214,49,44],[196,69,61],[214,49,44],[119,27,24],[127,42,39],[127,42,39],[144,59,56],[168,59,52],[119,27,24],[196,69,61],[196,69,61],[214,49,44],[119,27,24],[144,59,56],[127,42,39],[127,42,39],[144,59,56],[119,27,24],[214,49,44],[196,45,40],[196,69,61],[119,27,24],[168,59,52],[144,59,56],[127,42,39],[127,42,39],[144,59,56],[119,27,24],[172,39,35],[214,49,44],[119,27,24],[196,69,61],[176,22,1],[144,59,56],[127,42,39],[108,35,33],[115,29,26],[139,26,23],[119,27,24],[119,27,24],[168,59,52],[176,22,1],[139,26,23],[115,29,26],[108,35,33],[108,35,33],[196,45,40],[115,29,26],[144,59,56],[144,59,56],[144,59,56],[144,59,56],[115,29,26],[122,52,50],[108,35,33],[108,35,33],[108,35,33],[108,35,33],[127,42,39],[127,42,39],[127,42,39],[127,42,39],[108,35,33],[108,35,33],[108,35,33]]
	},
	{//11
		walkable : false,
		type : "inactive",
		name : "exit",
		strength : 0,
		pixels : [[88,64,61],[88,64,61],[88,64,61],[65,88,70],[65,88,70],[65,88,70],[65,88,70],[88,64,61],[88,64,61],[74,64,53],[88,64,61],[74,64,53],[116,158,125],[116,158,125],[116,158,125],[116,158,125],[116,158,125],[116,158,125],[74,64,53],[88,64,61],[88,64,61],[116,158,125],[172,231,187],[172,231,187],[172,231,187],[117,176,126],[117,176,126],[132,199,143],[116,158,125],[88,64,61],[65,88,70],[116,158,125],[172,231,187],[172,231,187],[117,176,126],[132,199,143],[132,199,143],[132,199,143],[116,158,125],[65,88,70],[65,88,70],[116,158,125],[172,231,187],[172,231,187],[117,176,126],[132,199,143],[132,199,143],[132,199,143],[116,158,125],[65,88,70],[65,88,70],[116,158,125],[172,231,187],[132,199,143],[132,199,143],[132,199,143],[132,199,143],[151,203,164],[116,158,125],[65,88,70],[65,88,70],[116,158,125],[172,231,187],[132,199,143],[132,199,143],[132,199,143],[151,203,164],[151,203,164],[116,158,125],[65,88,70],[88,64,61],[116,158,125],[132,199,143],[132,199,143],[151,203,164],[151,203,164],[151,203,164],[151,203,164],[116,158,125],[88,64,61],[88,64,61],[74,64,53],[116,158,125],[116,158,125],[116,158,125],[116,158,125],[116,158,125],[116,158,125],[74,64,53],[88,64,61],[74,64,53],[88,64,61],[88,64,61],[65,88,70],[65,88,70],[65,88,70],[65,88,70],[88,64,61],[88,64,61],[74,64,53]]
	},
	{//12
		walkable : false,
		type : "inactive",
		name : "edge",
		strength : 2,
		pixels : [[47,44,43],[47,44,43],[47,44,43],[74,70,70],[74,70,70],[74,70,70],[74,70,70],[47,44,43],[47,44,43],[47,44,43],[47,44,43],[116,106,106],[47,44,43],[61,58,58],[84,80,80],[61,58,58],[61,58,58],[47,44,43],[116,106,106],[47,44,43],[47,44,43],[47,44,43],[61,58,58],[73,66,66],[85,73,72],[85,73,72],[73,66,66],[61,58,58],[47,44,43],[47,44,43],[74,70,70],[84,80,80],[73,66,66],[84,80,80],[93,85,85],[93,85,85],[70,67,67],[73,66,66],[61,58,58],[74,70,70],[74,70,70],[61,58,58],[85,73,72],[93,85,85],[116,106,106],[116,106,106],[93,85,85],[85,73,72],[61,58,58],[74,70,70],[74,70,70],[61,58,58],[85,73,72],[93,85,85],[116,106,106],[116,106,106],[93,85,85],[85,73,72],[61,58,58],[74,70,70],[74,70,70],[61,58,58],[73,66,66],[50,47,47],[93,85,85],[93,85,85],[59,56,56],[73,66,66],[61,58,58],[74,70,70],[47,44,43],[47,44,43],[61,58,58],[73,66,66],[85,73,72],[85,73,72],[73,66,66],[61,58,58],[47,44,43],[47,44,43],[47,44,43],[116,106,106],[47,44,43],[61,58,58],[61,58,58],[61,58,58],[61,58,58],[47,44,43],[116,106,106],[47,44,43],[47,44,43],[47,44,43],[47,44,43],[74,70,70],[74,70,70],[74,70,70],[74,70,70],[47,44,43],[47,44,43],[47,44,43]]
	},
	{//13
		walkable : false,
		type : "active",
		name : "normal",
		strength : 1,
		pixels : [[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[82,30,32],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[82,30,32],[121,32,35],[82,30,32],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[82,30,32],[121,32,35],[177,35,39],[215,93,96],[82,30,32],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[82,30,32],[121,32,35],[177,35,39],[177,35,39],[215,93,96],[82,30,32],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[82,30,32],[121,32,35],[121,32,35],[177,35,39],[215,93,96],[193,83,86],[82,30,32],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[82,30,32],[121,32,35],[121,32,35],[121,32,35],[121,32,35],[82,30,32],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[82,30,32],[121,32,35],[121,32,35],[82,30,32],[82,30,32],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[82,30,32],[121,32,35],[121,32,35],[121,32,35],[82,30,32],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[82,30,32],[121,32,35],[121,32,35],[82,30,32],[121,32,35],[82,30,32],[0, 0, 0, 0],[0, 0, 0, 0]]
	},
	{//14
		walkable : false,
		type : "active",
		name : "bomb",
		strength : 1,
		pixels : [[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[74,34,33],[74,34,33],[74,34,33],[102,7,1],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[106,68,67],[106,68,67],[106,49,48],[38,38,38],[38,38,38],[106,68,67],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[106,68,67],[190,22,17],[164,19,15],[31,30,30],[38,38,38],[164,19,15],[190,22,17],[106,68,67],[0, 0, 0, 0],[0, 0, 0, 0],[106,68,67],[205,96,92],[45,44,44],[45,44,44],[45,44,44],[45,44,44],[205,96,92],[106,68,67],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[45,44,44],[139,138,138],[107,106,106],[107,106,106],[94,93,93],[45,44,44],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[45,44,44],[139,138,138],[107,106,106],[107,106,106],[94,93,93],[94,93,93],[94,93,93],[45,44,44],[0, 0, 0, 0],[0, 0, 0, 0],[45,44,44],[107,106,106],[107,106,106],[94,93,93],[94,93,93],[94,93,93],[121,120,120],[45,44,44],[0, 0, 0, 0],[0, 0, 0, 0],[119,117,117],[45,44,44],[107,106,106],[94,93,93],[121,120,120],[121,120,120],[45,44,44],[119,117,117],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[119,117,117],[45,44,44],[45,44,44],[45,44,44],[45,44,44],[119,117,117],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[74,34,33],[74,34,33],[74,34,33],[0, 0, 0, 0],[0, 0, 0, 0],[74,34,33],[74,34,33],[74,34,33],[0, 0, 0, 0]]
	},
	{//15
		walkable : false,
		type : "active",
		name : "flame",
		strength : 1,
		pixels : [[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[191,52,1],[221,36,11],[245,191,2],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[156,9,5],[191,52,1],[156,9,5],[221,124,34],[245,191,2],[191,52,1],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[156,9,5],[4,0,0],[4,0,0],[156,9,5],[4,0,0],[4,0,0],[191,52,1],[156,9,5],[0, 0, 0, 0],[156,9,5],[4,0,0],[254,215,76],[254,162,104],[221,36,11],[254,215,76],[254,162,104],[4,0,0],[156,9,5],[0, 0, 0, 0],[156,9,5],[221,51,21],[254,136,79],[254,162,104],[231,25,38],[254,136,79],[254,162,104],[156,9,5],[221,51,21],[156,9,5],[156,9,5],[221,51,21],[221,36,11],[221,84,25],[231,81,121],[231,25,38],[221,84,25],[221,84,25],[156,9,5],[0, 0, 0, 0],[0, 0, 0, 0],[156,9,5],[221,51,21],[148,19,11],[93,27,16],[93,27,16],[148,19,11],[156,9,5],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[64,30,27],[113,15,9],[221,56,26],[221,119,25],[113,15,9],[64,30,27],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[64,30,27],[64,30,27],[97,3,0],[156,9,5],[156,9,5],[97,3,0],[64,30,27],[64,30,27],[0, 0, 0, 0],[0, 0, 0, 0],[64,30,27],[64,30,27],[0, 0, 0, 0],[97,3,0],[97,3,0],[0, 0, 0, 0],[64,30,27],[64,30,27],[0, 0, 0, 0]]
	},
	{//16
		walkable : false,
		type : "active",
		name : "turn",
		strength : 1,
		pixels : [[0, 0, 0, 0],[0, 0, 0, 0],[154,70,68],[154,70,68],[154,70,68],[154,70,68],[154,70,68],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[154,70,68],[190,57,53],[190,57,53],[222,100,97],[222,100,97],[154,70,68],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[154,70,68],[190,57,53],[190,57,53],[190,57,53],[222,100,97],[222,100,97],[154,70,68],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[154,70,68],[190,57,53],[190,57,53],[190,57,53],[190,57,53],[154,70,68],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[154,70,68],[154,70,68],[154,70,68],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[154,70,68],[166,45,41],[166,45,41],[166,45,41],[154,70,68],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[154,70,68],[190,57,53],[190,57,53],[190,57,53],[166,45,41],[166,45,41],[154,70,68],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[154,70,68],[190,57,53],[190,57,53],[190,57,53],[154,70,68],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[154,70,68],[166,45,41],[166,45,41],[154,70,68],[154,70,68],[166,45,41],[154,70,68],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[154,70,68],[154,70,68],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[154,70,68],[154,70,68],[0, 0, 0, 0]]
	},
	{//17
		walkable : false,
		type : "active",
		name : "rock",
		strength : 1,
		pixels : [[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[55,43,41],[55,43,41],[55,55,55],[55,55,55],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[55,43,41],[122,110,107],[94,94,94],[94,94,94],[94,94,94],[55,55,55],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[55,43,41],[154,154,154],[154,154,154],[94,94,94],[94,94,94],[154,154,154],[154,154,154],[55,55,55],[0, 0, 0, 0],[0, 0, 0, 0],[55,43,41],[122,110,107],[60,60,60],[94,94,94],[94,94,94],[60,60,60],[94,94,94],[55,55,55],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[55,43,41],[122,110,107],[94,94,94],[94,94,94],[94,94,94],[55,55,55],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[55,43,41],[55,55,55],[55,55,55],[55,55,55],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[55,43,41],[55,43,41],[122,110,107],[111,92,88],[94,85,83],[94,94,94],[55,55,55],[55,55,55],[0, 0, 0, 0],[55,43,41],[122,122,122],[111,92,88],[55,55,55],[94,85,83],[94,94,94],[55,55,55],[122,122,122],[94,94,94],[55,55,55],[0, 0, 0, 0],[55,43,41],[55,43,41],[122,110,107],[111,92,88],[111,110,110],[111,92,88],[55,55,55],[55,55,55],[0, 0, 0, 0],[0, 0, 0, 0],[55,43,41],[122,110,107],[94,85,83],[55,55,55],[55,55,55],[122,122,122],[111,92,88],[55,55,55],[0, 0, 0, 0]]
	},
	{//18
		walkable : false,
		type : "active",
		name : "citizen",
		strength : 1,
		pixels : [[0, 0, 0, 0],[0, 0, 0, 0],[223,193,148],[223,193,148],[193,167,128],[193,167,128],[193,167,128],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[223,193,148],[223,193,148],[223,193,148],[223,193,148],[223,193,148],[193,167,128],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[223,193,148],[0,0,0],[223,193,148],[0,0,0],[223,193,148],[223,193,148],[193,167,128],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[223,193,148],[223,193,148],[223,193,148],[223,193,148],[223,193,148],[223,193,148],[193,167,128],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[223,193,148],[223,193,148],[0,0,0],[223,193,148],[193,167,128],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[100,154,103],[223,193,148],[223,193,148],[100,154,103],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[193,167,128],[108,167,112],[108,167,112],[108,167,112],[102,193,108],[100,154,103],[193,167,128],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[193,167,128],[100,154,103],[102,193,108],[102,193,108],[102,193,108],[108,167,112],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[100,154,103],[108,167,112],[100,154,103],[100,154,103],[108,167,112],[100,154,103],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[193,167,128],[223,193,148],[223,193,148],[193,167,128],[0, 0, 0, 0],[223,193,148],[223,193,148],[193,167,128],[0, 0, 0, 0]]
	},
	{//19
		walkable : false,
		type : "active",
		name : "you",
		strength : 1,
		pixels : [[0, 0, 0, 0],[0, 0, 0, 0],[112,115,120],[112,115,120],[112,115,120],[112,115,120],[112,115,120],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[112,115,120],[159,163,170],[159,163,170],[164,177,195],[164,177,195],[112,115,120],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[112,115,120],[159,163,170],[159,163,170],[159,163,170],[164,177,195],[159,163,170],[112,115,120],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[112,115,120],[159,163,170],[159,163,170],[159,163,170],[159,163,170],[112,115,120],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[112,115,120],[112,115,120],[112,115,120],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[112,115,120],[132,143,157],[132,143,157],[132,143,157],[112,115,120],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[112,115,120],[159,163,170],[159,163,170],[159,163,170],[132,143,157],[132,143,157],[112,115,120],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[112,115,120],[159,163,170],[159,163,170],[159,163,170],[112,115,120],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[112,115,120],[132,143,157],[132,143,157],[112,115,120],[112,115,120],[132,143,157],[112,115,120],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[112,115,120],[112,115,120],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[112,115,120],[112,115,120],[0, 0, 0, 0]]
	},
	{//20
		walkable : false,
		type : "inactive",
		name : "lava",
		strength : 1,
		pixels : [[103,9,6],[166,45,41],[103,9,6],[166,45,41],[193,16,11],[93,31,29],[139,20,16],[193,16,11],[166,45,41],[103,9,6],[139,20,16],[103,9,6],[139,20,16],[226,36,24],[93,31,29],[139,20,16],[103,9,6],[166,45,41],[103,9,6],[139,20,16],[103,9,6],[93,31,29],[103,9,6],[193,16,11],[193,16,11],[193,16,11],[166,45,41],[103,9,6],[166,45,41],[226,36,24],[226,36,24],[166,45,41],[103,9,6],[166,45,41],[166,45,41],[226,36,24],[93,31,29],[93,31,29],[103,9,6],[93,31,29],[193,16,11],[93,31,29],[103,9,6],[139,20,16],[103,9,6],[103,9,6],[103,9,6],[139,20,16],[103,9,6],[103,9,6],[193,16,11],[193,16,11],[139,20,16],[166,45,41],[139,20,16],[166,45,41],[139,20,16],[166,45,41],[193,16,11],[103,9,6],[226,36,24],[193,16,11],[166,45,41],[103,9,6],[139,20,16],[93,31,29],[226,36,24],[193,16,11],[193,16,11],[139,20,16],[193,16,11],[226,36,24],[103,9,6],[93,31,29],[139,20,16],[93,31,29],[193,16,11],[93,31,29],[226,36,24],[139,20,16],[166,45,41],[139,20,16],[139,20,16],[166,45,41],[193,16,11],[103,9,6],[193,16,11],[193,16,11],[166,45,41],[103,9,6],[103,9,6],[93,31,29],[139,20,16],[93,31,29],[193,16,11],[166,45,41],[193,16,11],[226,36,24],[103,9,6],[93,31,29]]
	},
	{//21
		walkable : false,
		type : "inactive",
		name : "fire",
		strength : 1,
		pixels : [[153,87,70],[153,87,70],[166,79,60],[158,112,85],[254,207,6],[173,99,71],[135,65,49],[173,99,71],[153,87,70],[158,112,85],[135,65,49],[158,112,85],[135,65,49],[173,99,71],[173,99,71],[228,76,42],[173,99,71],[227,70,49],[135,65,49],[135,65,49],[135,65,49],[227,70,49],[135,65,49],[173,99,71],[153,87,70],[173,99,71],[173,99,71],[227,70,49],[153,87,70],[158,112,85],[166,79,60],[166,79,60],[173,99,71],[227,70,49],[250,132,24],[173,99,71],[228,76,42],[135,65,49],[158,112,85],[166,79,60],[166,79,60],[166,79,60],[135,65,49],[173,99,71],[228,76,42],[250,132,24],[173,99,71],[173,99,71],[227,70,49],[153,87,70],[158,112,85],[203,75,58],[166,79,60],[201,86,55],[228,76,42],[228,76,42],[227,70,49],[158,112,85],[203,75,58],[203,75,58],[166,79,60],[227,70,49],[204,84,67],[250,132,24],[131,52,41],[201,86,55],[131,52,41],[204,84,67],[173,99,71],[153,87,70],[166,79,60],[227,70,49],[131,52,41],[61,39,21],[250,132,24],[131,52,41],[228,76,42],[131,52,41],[227,70,49],[166,79,60],[204,84,67],[61,39,21],[99,69,57],[99,69,57],[119,78,55],[61,39,21],[61,39,21],[99,69,57],[61,39,21],[166,79,60],[153,87,70],[227,70,49],[61,39,21],[99,69,57],[119,78,55],[131,52,41],[119,78,55],[61,39,21],[204,84,67],[227,70,49]]
	}
];
var tips = [["You can move your self as many times as you want in a turn, and it won't skip the turn.",0],["Any type of moving character can bump into you, and you can change their direction by usuing yourself as an obstacle. However, you cannot be killed by any enemies.",0],["If you create a corner, a moving character will turn in the direction indicated by the corner, when he reaches it.",0]];
var levelTips = [["That's a nomal enemy. Be careful, because he enjoys citizen nibbling.",13],["This is a box. You can walk to push it, and it will turn both citizens and enemies.",4],["These bricks are called ground. Everybody can walk on them. Nothing special here.",0],["These bricks are called water. The characters can swim across water, but you cannot push boxes onto it.",1],["These are stone. They just sit there and get in your, and everybody else's way.",2]];//the first space is for after level one.
/*["These guys are a lot like you, only they are bad... so be wary, and weary, or whatever else you want to be. Just don't let them eat the poor little critt'rs.",16],["Sometimes there's more than one citizen. You will \"beat\" the level even if you only get one to the finish, and the rest die... but what kind of a hero would you be then?",18],["If a character walks into one of these bricks, they get fried... be they citizen or monster. The lava shows no partiality to outward appearances.",20],["If a character walks into one of these bricks, they get fried... be they citizen or monster. The lava shows no partiality to outward appearances.",20]*/
var randomTip;
var gameState = 'help';
var helpPage = 1;
var menuTime = 0;

var you = {
    pix: 0,
    strength: 1,
    type: "you",
    walkable: true,
    pos: {x:1, y:1}
};

var WAIT_TIME = 3;
var gameSpeed = 3;

//block types
/*
 * Ground (normal) 0
 * Water (puts out flaming citizens) 1
 * Stone (breakable) 2
 * Wood (pick up, if not on flames) (lights on fire when near a flame) 3
 * Box (pushable) 4
 * sand (breaks on touch)5
 * Iron (unbreakable, even by enemies [will trigger a bomb enemy]) 6
 * Coin (gives you coins) 7
 * Time (gives you time) 8
 * Directional (points to a direction) 9
 * Enemy (spawns enemies on contact) 10
 * Exit (citizens exit through here) 11
 * Edge (cannot be broken) 12
 * Normal 13
 * Bomb (explode on attack) 14
 * Flame 15
 * Turn (Takes a turn each time you move.) 16
 * Rock (only killed by lava) (will turn in the opposite direction you hit him.) (Will break the brick in front of him, except iron) 17
 * citizen 18
 * you 19
 * lava 20 (lights normals on fire, kills citz.)
 * fire 21 If a rock hits, the rock turns to bomb, and the fire to stone.
*/
var levels = [
[
[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],
[12,18,0,0,2,1,1,1,1,1,1,1,1,1,12],
[12,2,0,0,0,19,0,1,0,4,0,1,1,1,12],
[12,0,0,0,0,0,0,0,1,1,1,2,1,1,12],
[12,0,0,0,0,0,0,0,0,0,0,2,2,2,12],
[12,0,2,0,0,0,0,0,0,2,0,2,2,2,12],
[12,0,0,2,2,0,2,2,2,0,0,2,2,2,12],
[12,0,0,0,2,8,20,0,0,0,0,0,7,20,12],
[12,0,0,0,0,2,2,0,0,0,2,2,2,2,12],
[12,0,0,0,0,0,0,0,0,0,0,5,1,20,12],
[12,2,5,2,5,5,2,0,2,0,0,0,4,7,12],
[12,11,4,15,2,2,2,0,2,2,0,0,0,2,12],
[12,5,0,7,3,3,3,0,20,2,0,0,0,11,12],
[12,0,5,5,5,5,5,8,2,2,2,2,2,2,12],
[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12]
],
[
[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],
[12,18,19,0,2,0,0,0,0,1,0,0,0,13,12],
[12,0,0,0,0,0,0,0,0,0,4,1,0,2,12],
[12,0,0,0,0,0,2,2,2,10,2,1,2,2,12],
[12,2,2,0,2,2,0,1,2,2,2,2,1,0,12],
[12,6,2,0,2,0,0,0,1,1,1,1,4,1,12],
[12,9,2,0,0,0,0,0,2,2,6,0,4,0,12],
[12,5,2,2,4,2,2,2,0,0,0,0,2,0,12],
[12,5,0,2,0,0,0,2,0,2,2,2,2,5,12],
[12,2,0,2,2,2,0,2,0,0,0,0,0,0,12],
[12,6,0,0,2,2,5,5,2,2,2,2,2,0,12],
[12,2,6,2,0,1,0,4,0,0,0,0,0,0,12],
[12,0,0,0,0,2,0,2,0,0,6,2,7,2,12],
[12,0,4,2,6,2,0,0,0,6,6,2,2,2,12],
[12,11,12,12,12,12,12,12,7,12,12,12,12,12,12]
],
[
[12,12,11,12,12,12,12,12,12,12,12,12,12,12,12],
[12,0,13,2,1,1,0,0,2,0,0,4,0,0,12],
[12,1,0,4,0,1,0,1,2,4,0,0,4,0,12],
[12,0,0,0,1,2,2,0,0,1,0,4,1,0,12],
[12,0,0,2,0,2,0,0,0,0,4,1,2,0,12],
[12,2,2,2,2,2,2,0,2,2,2,2,2,0,12],
[12,7,2,18,0,0,0,19,0,0,0,13,2,7,12],
[12,2,2,2,2,2,2,0,2,2,2,2,2,8,12],
[12,2,0,0,0,0,2,1,0,0,2,0,1,0,12],
[12,0,0,0,0,0,0,0,2,0,0,4,1,0,12],
[12,2,0,0,0,0,0,0,0,0,1,1,1,0,12],
[12,0,0,0,0,0,0,0,2,0,0,0,0,0,12],
[12,0,0,7,0,0,5,2,0,0,0,0,2,0,12],
[12,0,0,2,2,2,16,0,0,0,2,0,0,0,12],
[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12]
],
[
[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],
[12,1,1,1,1,1,1,1,1,1,1,1,1,1,12],
[12,1,18,0,0,0,0,5,0,0,0,0,18,1,12],
[12,1,0,0,1,1,1,1,1,1,1,0,0,1,12],
[12,1,0,1,0,0,0,20,0,0,0,1,0,1,12],
[12,1,0,1,0,0,0,0,0,0,0,1,0,1,12],
[12,1,0,1,0,0,0,0,0,0,0,1,0,1,12],
[12,1,4,1,20,0,0,11,0,0,20,1,4,1,12],
[12,1,0,1,0,0,0,0,0,0,0,1,0,1,12],
[12,1,0,1,0,0,0,0,0,0,0,1,0,1,12],
[12,1,0,1,0,0,0,20,0,0,0,1,0,1,12],
[12,1,0,0,1,1,1,1,1,1,1,0,0,1,12],
[12,1,18,0,0,0,0,19,0,0,0,0,18,1,12],
[12,1,1,1,1,1,1,1,1,1,1,1,1,1,12],
[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12]
]
];
var chars = [];
var blx = [];

var points = 0;
var turns = 150;
var levelScores = [];//array of arrays, with [fewest turns,most points gained,most citizens saved]
var curTurns = 0;
var curPoints = 0;
var curCitizens = 0;
var roundCitizens = 0;
var roundPoints = 0;
var roundTurns = 0;
var curMoves = 0;
var startCitizens;

var totalPoints = 0;
var totalCitizens = 0;
//fewest turns, most points, most citizens saved.
var bestScores = [0,0,0];
var myScore = [];

var curLevel = 0;

//load game
function loadGame() {
    //temp load fix.
    for (var i = 1; i < levels.length+1; i ++) {//start after the version of the game this is. (so that I can convert the format if necessary, from an older version of the game.
        levelScores[i-1][0]=load[i][0];
        levelScores[i-1][1]=load[i][1];
        levelScores[i-1][2]=load[i][2];
    }
    bestScores[0] = load[load.length-8][0];
    bestScores[1] = load[load.length-8][1];
    bestScores[2] = load[load.length-8][2];
    totalPoints = load[load.length-7];
    roundCitizens = load[load.length-6];
    roundPoints = load[load.length-5];
    totalCitizens = load[load.length-4];
    curLevel = load[load.length-3];
    points = load[load.length-2];
    if (load[load.length-1]==='NaN') {
        turns = 100;
    }
    else {
        turns = load[load.length-1];
    }
};

function setScores() {//only call this if you won.
    if (curCitizens>=levelScores[curLevel][2]) {//check to be sure you have saved citizens (or more than last time).
        if (curCitizens>levelScores[curLevel][2]) {
            levelScores[curLevel][2] = curCitizens;
        }
        if (curTurns<levelScores[curLevel][0]) {//if you saved more citz (or same) and also took less turns, then count the points. (and set the turns).
            if (curPoints>levelScores[curLevel][1]) {
                levelScores[curLevel][1] = curPoints;
            }
            levelScores[curLevel][0] = curTurns;
        }
    }
};
function setRoundScores() {
    roundTurns = 0;
    roundCitizens = 0;
    roundPoints =0;
    turns = 100;
    if (roundCitizens>bestScores[2]) {
        bestScores[curLevel][2] = roundCitizens;
    }
    if (roundPoints>bestScores[1]) {
        bestScores[curLevel][1] = roundPoints;
    }
    if (roundTurns<bestScores[0]) {
        bestScores[curLevel][0] = roundTurns;
    }
};
function saveGame() {
    //var roundCitizens = 0;
    //var roundPoints = 0;
    //var totalCitizens = 0;
    setScores();
    var saveOutput = "";
    for (var i in levelScores) {
        saveOutput += ("["+levelScores[i][0]+",");
        saveOutput += (levelScores[i][1]+",");
        saveOutput += (levelScores[i][2]+"],");
    }
    saveOutput+=("["+bestScores[0]+","+bestScores[1]+","+bestScores[2]+"]");
    print ("load = ["+gameVersion+","+saveOutput+","+totalPoints+","+roundCitizens+","+roundPoints+","+totalPoints+","+roundCitizens+","+roundPoints+","+totalCitizens+","+curLevel+","+points+","+(turns-10)+"];");
};

var blockPix = [];
//load arrow pictures
var arrows = [
[[0, 0, 0, 0],[142,149,177],[0, 0, 0, 0],[142,149,177],[166,190,207],[142,149,177],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0]],
[[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[142,149,177],[166,190,207],[142,149,177],[0, 0, 0, 0],[142,149,177],[0, 0, 0, 0]],
[[0, 0, 0, 0],[142,149,177],[0, 0, 0, 0],[142,149,177],[166,190,207],[0, 0, 0, 0],[0, 0, 0, 0],[142,149,177],[0, 0, 0, 0]],
[[0, 0, 0, 0],[142,149,177],[0, 0, 0, 0],[0, 0, 0, 0],[166,190,207],[142,149,177],[0, 0, 0, 0],[142,149,177],[0, 0, 0, 0]]
];
var upArrow;
var downArrow;
var leftArrow;
var rightArrow;

function loadBlocks(blocks,level) {
    for (var i = 0; i < level.length; i++) {
        blx.push([]);
        for (var j = 0; j < level[i].length; j++) {
            if (blocks[level[i][j]].type==="inactive") {
                blx[i].push(
                    {
                        pix: level[i][j],
                        strength: blocks[level[i][j]].strength,
                        type: blocks[level[i][j]].name,
                        walkable: blocks[level[i][j]].walkable
                    }
                );
            }
            else if (blocks[level[i][j]].name==="you") {
                blx[i].push(
                    {
                        pix: 0,
                        strength: 0,
                        type: "dirt",
                        walkable: true
                    }
                );
                you = {
                    pix: level[i][j],
                    strength: blocks[level[i][j]].strength,
                    type: blocks[level[i][j]].name,
                    walkable: blocks[level[i][j]].walkable,
                    pos: createVector(j,i)
                };
            }
            else if (blocks[level[i][j]].type==="active") {
                blx[i].push(
                    {
                        pix: 0,
                        strength: 0,
                        type: "dirt",
                        walkable: true
                    }
                );
                chars.push(
                    {
                        pix: level[i][j],
                        strength: blocks[level[i][j]].strength,
                        type: blocks[level[i][j]].name,
                        walkable: blocks[level[i][j]].walkable,
                        dir: createVector(1,0),
                        pos: createVector(j,i)
                    }
                );
            }
        }
    }
};

function setup(){
  var canvas = createCanvas(400, 400);
  canvas.parent('shepherd-app');
  randomTip = round(random(0,tips.length-1));
  upArrow = pixelsToImage(arrows[0],pixSize,3,3);
  downArrow = pixelsToImage(arrows[1],pixSize,3,3);
  leftArrow = pixelsToImage(arrows[2],pixSize,3,3);
  rightArrow = pixelsToImage(arrows[3],pixSize,3,3);
  //load level scores with empty.
  for (var i = 0; i < levels.length; i++) {
      levelScores.push([1000,0,0]);
  }
  if (load!=='none') {
      loadGame();
      menuTime = 1;
      gameState = "menu";
  }
  loadBlocks(blocks,levels[curLevel]);
  noLoop();
}

//draw menus
var menuSelected = 0;
var menuTexts = ["Play","Restart Level (-5 turns)","Save Game (-10 turns on load)","Help"];
var nextTexts = ["Next level","Restart Level (-5T)","Save Game (-10T)","Help"];

function drawNext() {
    textAlign (CENTER,CENTER);
    textSize(15);
    for (var i in nextTexts) {
        if (i > menuSelected-1&&i < menuSelected+1) {
            fill (250, 250, 250);
        }
        else {
            fill (176, 171, 166);
        }
        if (i<1 && curCitizens<1) {//if you didn't pass the level.
            if (menuSelected === 0) {
                menuSelected = 1;
            }

        }
        else {
            text(nextTexts[i],width/2,height/2+150-(menuTexts.length*25)+(i*25));
        }
    }
    fill(145, 141, 138);
    if (curCitizens>0) {
        text("You beat level " +(curLevel+1)+"!",width/2,height/2-150);
    }
    else {
        text("Awe man, they were all eaten.",width/2,height/2-150);
    }
    //tips
    text("Here's a tip:",width/2,height/2-120);

    fill(207, 206, 205);
    if (curCitizens<1) {//only show random tip if you did not win.
        text (tips[randomTip][0],width/2-150,height/2-150,300,200);
    }
    else {//show level tip.
    textAlign(LEFT,TOP);
        text (levelTips[curLevel][0],width/2-100,height/2-90,250,200);
        image(blockPix[levelTips[curLevel][1]],width/2-150,height/2-75);
    }
    textSize(12);
    fill(145, 141, 138);

    textAlign(LEFT,TOP);
    text("Level highscores:",20,height/2+75);
    if (levelScores[curLevel][0]<1000) {
        text("Fewest turns: "+levelScores[curLevel][0],20,height/2+95);
    }
    else {
        text("Turns: infinity...",20,height/2+95);
    }
    text("Most points: "+levelScores[curLevel][1],20,height/2+110);
    text("Citizens saved: "+levelScores[curLevel][2],20,height/2+125);

    textAlign(RIGHT,TOP);
    text("This time through:",width-20,height/2+75);
    text("Turns taken: "+curTurns,width-20,height/2+95);
    text("Points: "+curPoints,width-20,height/2+110);
    text("Citizens saved: "+curCitizens,width-20,height/2+125);

    textAlign(CENTER,BOTTOM);
    text("Total scores - Citizens saved: "+totalCitizens+", Points: "+totalPoints,width/2,height/2+170);
    text("Round scores - Citizens saved: "+roundCitizens+", Points gained: "+roundPoints,width/2,height/2+190);
};
function drawMenu() {
    textAlign (CENTER,CENTER);
    textSize(15);
    for (var i in menuTexts) {
        if (i > menuSelected-1&&i < menuSelected+1) {
            fill (250, 250, 250);
        }
        else {
            fill (176, 171, 166);
        }
        text(menuTexts[i],width/2,height/2-(menuTexts.length*25)+(i*25));
    }
    fill(145, 141, 138);
    text("Level:" +(curLevel+1),width/2,height/2-125);
    if (menuTime===0) {
        textSize(10);
        text("Use the arrow keys and space to navigate the menu." ,width/2,40);
    }
    //New features update.
    textSize(10);
    text(MESSAGE,width/2,20);
    textSize(12);
    text("Level highscores:",width/2-90,height/2+10);
    text("This time through:",width/2+90,height/2+10);
    text("Round scores:",width/2,height/2+125);

    textAlign(LEFT,TOP);
    if (levelScores[curLevel][0]<1000) {
        text("Fewest turns: "+levelScores[curLevel][0],width/2-150,height/2+35);
    }
    else {
        text("Turns: infinity...",width/2-150,height/2+35);
    }
    text("Most points: "+levelScores[curLevel][1],width/2-150,height/2+50);
    text("Citizens saved: "+levelScores[curLevel][2],width/2-150,height/2+65);

    textAlign(RIGHT,TOP);
    text("Turns taken: "+curTurns,width/2+150,height/2+35);
    text("Points: "+curPoints,width/2+151,height/2+50);
    text("Citizens saved: "+curCitizens,width/2+150,height/2+65);

    textAlign(CENTER,TOP);
    text("Citizens saved: "+roundCitizens,width/2,height/2+140);
    text("Points gained: "+roundPoints,width/2,height/2+160);
};
function drawHelp() {
    textSize(12);
    fill (176, 171, 166);
    switch (helpPage) {
        case 1:
            image(blockPix[18],width/2-175,height/2-150);
            textAlign(LEFT,TOP);
            text ("This is a citizen. They innocently walk around the map. Your goal is to guide them to the exit without getting them killed, or running out of turns.",width/2-150,height/2-150,300,200);
            textAlign(RIGHT,TOP);
            image(blockPix[19],width/2+155,height/2-50);
            text ("This is you. Use your arrow keys to move. Citizens cannot move through you, so you can use yourself to guide them through the level. You cannot die, so you can also direct enemies.",width/2-150,height/2-50,300,200);
            image(blockPix[13],width/2-175,height/2+50);
            textAlign(LEFT,TOP);
            text ("That is an enemy. He enjoys the taste of citizens toes, so watch out, because otherwise that poor little guy will become a monster's treat. Do not let them get to the exit, or they will eat a citizen that has already made it to safety.",width/2-150,height/2+50,300,200);
        break;
        case 2:
            image(blockPix[18],width/2-155,height/2-100);
            image(blockPix[2],width/2-175,height/2);
            image(blockPix[2],width/2-175,height/2+20);
            image(blockPix[2],width/2-155,height/2+20);
            image(blockPix[11],width/2,height/2);
            stroke(125, 122, 121);
            strokeWeight(2);
            line (width/2-145,height/2-75,width/2-145,height/2+10);
            line (width/2-145,height/2+11,width/2-5,height/2+11);
            noStroke();
            textAlign(CENTER,TOP);
            text ("Both citizens and enemies move in a completely predictable pattern. There is no randomeness. Your goal is to guide the citizens to the exit (the green brick), without letting an enemy touch them.",width/2-150,height/2+50,300,200);
        break;
        case 3:
            textAlign(CENTER,TOP);
            //text ("You can pause at any time by either pressing space or esc. From there you can either restart the current level, or save your game. You can save at any time, but when you load a saved game, it will have 10 fewer turns than when you saved it. If you restart a level, or fail it an have to retry, it will cost you 5 turns. You may be able to do it faster and get more points, but you may simply end up wasting turns.",width/2-150,height/2+50,300,200);
            text ("Press space or esc to pause. You can save your game, or restart a level any time you wish, but it will cost you turns (when you load the saved game, it will have fewer turns, so don't be afraid to save your progress, that won't cost anything, it's the loading that costs) Simply paste your load file in the zone marked at the top of this program.\nIf the game is going too slowly for you, press z and x to change the speed. Press \"C\" to set the speed back to normal\n\nAs you play, you'll learn more about the way the world works, and you will be able to increase your scores for each level. I bet you can't beat mine.\nAll the best, Shepherd.",width/2-150,height/2-180,300,300);
            image(blockPix[18],width/2-10,height/2+85);
        break;
        case 4:
            image(blockPix[18],width/2-175,height/2-200);
        break;
    }
    textAlign(CENTER,BOTTOM);
    text ("Use the arrow keys to continue.",width/2,height/2+190);
};

function drawMouseNotice() {
    textSize(12);
    fill(0);
    rect(50, 100, width-100, height-200);
    fill (176, 171, 166);
    textAlign(CENTER);
    text("Hover mouse pointer over the canvas\nto interact using the keyboard.",width/2,height/2);
}

function checkBlock(char,side) {//side = CreateVector
    if (side===undefined) {
        return blx[char.pos.y+char.dir.y][char.pos.x+char.dir.x];
    }
    else {
        return blx[char.pos.y+side.y][char.pos.x+side.x];
    }
};//stable

function moveCheck(i) {
    if ((checkBlock(chars[i]).walkable&&!(chars[i].pos.y+chars[i].dir.y===you.pos.y&&chars[i].pos.x+chars[i].dir.x===you.pos.x))){
        chars[i].pos.add(chars[i].dir);
        //print(chars[i].type+ ": move forwards");
        return;
    }//forward
    else if (//corner turn 1
        (checkBlock(//block on one side (swap x and y)
            chars[i],createVector(chars[i].dir.y,chars[i].dir.x)).walkable&&!(
                chars[i].pos.y+chars[i].dir.x===you.pos.y&&chars[i].pos.x+chars[i].dir.y===you.pos.x)
        )&&(!checkBlock(//no block on other side (opposite of swap x and y)
            chars[i],createVector(-chars[i].dir.y,-chars[i].dir.x)).walkable||(
                chars[i].pos.y-chars[i].dir.x===you.pos.y&&chars[i].pos.x-chars[i].dir.y===you.pos.x)
        )
    ){//end of if block ,start of if statement.
        chars[i].dir = createVector(chars[i].dir.y, chars[i].dir.x);
        return;
    }
    else if (//corner turn 2
        (checkBlock(//block on one side (opposite of swap x and y)
            chars[i],createVector(-chars[i].dir.y,-chars[i].dir.x)).walkable&&!(
                chars[i].pos.y-chars[i].dir.x===you.pos.y&&chars[i].pos.x-chars[i].dir.y===you.pos.x)
        )&&(!checkBlock(//no block on other side (swap x and y)
            chars[i],createVector(chars[i].dir.y,chars[i].dir.x)).walkable||(
                chars[i].pos.y+chars[i].dir.x===you.pos.y&&chars[i].pos.x+chars[i].dir.y===you.pos.x)
        )
    ){//end of if block ,start of if statement.
        chars[i].dir = createVector(-chars[i].dir.y, -chars[i].dir.x);
        return;
    }
    else if (checkBlock(chars[i],createVector(-chars[i].dir.x,-chars[i].dir.y)).walkable&&!(chars[i].pos.y-chars[i].dir.y===you.pos.y&&chars[i].pos.x-chars[i].dir.x===you.pos.x)) {//if block forwards
        //chars[i].pos.sub(chars[i].dir);
        chars[i].dir.mult(-1);
        return;
    }
    else if (checkBlock(chars[i],createVector(chars[i].dir.y,chars[i].dir.x)).walkable&&!(chars[i].pos.y+chars[i].dir.x===you.pos.y&&chars[i].pos.x-chars[i].dir.y===you.pos.x)) {//swap x and y
        chars[i].dir = createVector(chars[i].dir.y, chars[i].dir.x);
        return;
    }
    else if (checkBlock(chars[i],createVector(-chars[i].dir.y,-chars[i].dir.x)).walkable&&!(chars[i].pos.y-chars[i].dir.x===you.pos.y&&chars[i].pos.x-chars[i].dir.y===you.pos.x)) {//opposite of swap x and y
        chars[i].dir = createVector(-chars[i].dir.y,-chars[i].dir.x);
        return;
    }
    else {
        return false;
    }
};//stablish (seeming)

function resetLevel() {
    //levelScores;
    curTurns = 0;
    curPoints = 0;
    curCitizens = 0;
    curMoves = 0;
    chars = [];
    blx = [];
    loadBlocks(blocks,levels[curLevel]);
};

function nextLevel() {//Go to the next level (only if you won)
    turns+=100;
    setScores();//set the scores for the level whether it's the last level or not.
    if (curLevel<levels.length-1) {// if curLevel is 1 (level 2, that's the last level, and levels.length is 2, so it will go to level 3, (curLevel = 2), which does not exist. So, -1
        curLevel+=1;
    }
    else {
        setRoundScores();
        curLevel = 0;
    }//new round.
    resetLevel();
};

function checkForCitizens() {
    var citizensLeft=false;
    //check if there are still cits.
    for (var f in chars) {
        if (chars[f].type==="citizen") {
            citizensLeft=true;
        }
    }
    if (citizensLeft===false) {
        gameState = "next";
    }
    //check if there are still citizens
};

var wait = WAIT_TIME;
function throughExit(i) {
    var citizensLeft=false;
    if (chars[i].type==='citizen') {
        curCitizens+=1;
        roundCitizens+=1;
        totalCitizens+=1;
    }
    else {
        curCitizens-=1;
        roundCitizens-=1;
        totalCitizens-=1;
        points-=1;
        totalPoints-=1;
        curPoints-=1;
    }
    chars.splice(i,1);
    checkForCitizens();
};

function moveChar(i,wait,go) {
    //if goes through exit.
    if (chars[i].pos.x+chars[i].dir.x>=levels[curLevel][0].length||chars[i].pos.y+chars[i].dir.y>=levels[curLevel].length||chars[i].pos.x+chars[i].dir.x<0||chars[i].pos.y+chars[i].dir.y<0) {//if out through a hole.
        //print(chars[i].type +": Through exit");
        throughExit(i);
        return;
    }
    if (checkBlock(chars[i]).type==='exit'){//goes through exit
        throughExit(i);
        return;
    }
    //end goes through exit.
    if (checkBlock(chars[i]).type==='coin'){
        points+=1;
        curPoints+=1;
        roundPoints+=1;
        totalPoints+=1;
        //remove block after touch (turns to stone);
        blx[chars[i].pos.y+chars[i].dir.y][chars[i].pos.x+chars[i].dir.x] = {
            pix: 2,
            strength: blocks[2].strength,
            type: blocks[2].name,
            walkable: blocks[2].walkable
        };
    }
    if (checkBlock(chars[i]).type==='time'){
        turns+=10;
        curTurns-=10;
        //remove block after touch (turns to stone);
        blx[chars[i].pos.y+chars[i].dir.y][chars[i].pos.x+chars[i].dir.x] = {
            pix: 2,
            strength: blocks[2].strength,
            type: blocks[2].name,
            walkable: blocks[2].walkable
        };
    }
    if (checkBlock(chars[i]).type==='lava'){
        //remove block after touch (turns to iron);
        if (chars[i].type==='normal'||chars[i].type==='flame') {
            if (chars[i].type!=='flame') {
                chars[i].type='flame';
                chars[i].pix=15;
                chars[i].strength=blocks[15].strength;
            }
        }
        else if (chars[i].type==='rock') {
            blx[chars[i].pos.y+chars[i].dir.y][chars[i].pos.x+chars[i].dir.x] = {//turn to coin
                pix: 7,
                strength: blocks[7].strength,
                type: blocks[7].name,
                walkable: blocks[7].walkable
            };
            chars.splice(i,1);
        }
        else {
            blx[chars[i].pos.y+chars[i].dir.y][chars[i].pos.x+chars[i].dir.x] = {//turn to iron
                pix: 6,
                strength: blocks[6].strength,
                type: blocks[6].name,
                walkable: blocks[6].walkable
            };
            chars.splice(i,1);
            checkForCitizens();
        }
        return;
    }
    if (chars[i].type!=='citizen') {//check for eat citizen
        for (var j = chars.length-1; j >= 0; j--) {
            if (((chars[i].pos.x===chars[j].pos.x&&chars[i].pos.y===chars[j].pos.y)||(chars[i].pos.x-chars[i].dir.x===chars[j].pos.x&&chars[i].pos.x===chars[j].pos.x-chars[j].dir.x&&chars[i].pos.y-chars[i].dir.y===chars[j].pos.y&&chars[i].pos.y===chars[j].pos.y-chars[j].dir.y))&&chars[j].type==='citizen'&&i!==j) {//check for collizsion on square, and when (enemy position minus direction = player, and player position minus player direction = enemy). [player was just on space that enemy was on, and enemy is on space that player was on.]
                //print(chars[i].type+": Eat citizen");
                chars.splice(j,1);
                checkForCitizens();
                return;
            }
        }
    }//check for eat citizen

    if (wait!==0){
        return;
    }

    //spawn block
    if (checkBlock(chars[i]).type==='enemy') {
        for (var j in blx){
            for (var f in blx[j]) {
                if (blx[j][f].type==='directional') {
                    chars.push ({
                            pix: 17,
                            strength: blocks[17].strength,
                            type: blocks[17].name,
                            walkable: blocks[17].walkable,
                            dir: createVector(1,0),
                            pos: createVector((f-1)+1,(j-1)+1)
                        });
                blx[chars[i].pos.y+chars[i].dir.y][chars[i].pos.x+chars[i].dir.x] = {
                    pix: 2,
                    strength: blocks[2].strength,
                    type: blocks[2].name,
                    walkable: blocks[2].walkable
                };
                blx[j][f] = {
                    pix: 2,
                    strength: blocks[2].strength,
                    type: blocks[2].name,
                    walkable: blocks[2].walkable
                };
                }
            }
        }
        wait = WAIT_TIME;
    }
    //spawn block

    switch (chars[i].type) {
        case 'rock':
            if (checkBlock(chars[i]).strength===1&&!(chars[i].pos.y+chars[i].dir.y===you.pos.y&&chars[i].pos.x+chars[i].dir.x===you.pos.x)){
                //print("Break rock");
                //destroy the block.
                blx[chars[i].pos.y+chars[i].dir.y][chars[i].pos.x+chars[i].dir.x] = {
                    pix: 0,
                    strength: blocks[0].strength,
                    type: blocks[0].name,
                    walkable: blocks[0].walkable
                };
                //moveCheck(i);
            }//if the block can be destroyed
            else if (checkBlock(chars[i]).type==='fire'){//if hits fire, turns to bomb, and make brick into time.
                chars[i].type='bomb';
                chars[i].pix=14;
                chars[i].strength=blocks[14].strength;
                blx[chars[i].pos.y+chars[i].dir.y][chars[i].pos.x+chars[i].dir.x] = {//turn to stone
                    pix: 8,
                    strength: blocks[8].strength,
                    type: blocks[8].name,
                    walkable: blocks[8].walkable
                };
            }
            else {
                moveCheck(i);
                return;
            }
        break;
        case 'normal':
            moveCheck(i);
        break;
        case 'citizen':
            if (checkBlock(chars[i]).type==='fire'){//if hits fire, turns to flame, and make brick into stone.
                chars[i].type='flame';
                chars[i].pix=15;
                chars[i].strength=blocks[15].strength;
                blx[chars[i].pos.y+chars[i].dir.y][chars[i].pos.x+chars[i].dir.x] = {//turn to stone
                    pix: 2,
                    strength: blocks[2].strength,
                    type: blocks[2].name,
                    walkable: blocks[2].walkable
                };
                checkForCitizens();
                return;
            }
            moveCheck(i);
        break;
        case 'bomb':
            if ((chars[i].pos.y+chars[i].dir.y===you.pos.y&&chars[i].pos.x+chars[i].dir.x===you.pos.x)||checkBlock(chars[i]).type==='iron'){//if it hits you.
                if (chars[i].pos.x<levels[curLevel][0].length&&chars[i].pos.y+1<levels[curLevel].length) {//chack that the clock is on the map.
                if (checkBlock(chars[i],createVector(0,1)).strength<3){//check that it is killable.
                blx[chars[i].pos.y+1][chars[i].pos.x] = {
                    pix: 5,
                    strength: blocks[5].strength,
                    type: blocks[5].name,
                    walkable: blocks[5].walkable
                };
                }
                }
                if (chars[i].pos.x+1<levels[curLevel][0].length&&chars[i].pos.y<levels[curLevel].length) {//chack that the clock is on the map.
                if (checkBlock(chars[i],createVector(1,0)).strength<3){//check that it is killable.
                blx[chars[i].pos.y][chars[i].pos.x+1] = {
                    pix: 5,
                    strength: blocks[5].strength,
                    type: blocks[5].name,
                    walkable: blocks[5].walkable
                };
                }
                }
                if (chars[i].pos.x<levels[curLevel][0].length&&chars[i].pos.y-1<levels[curLevel].length) {//chack that the clock is on the map.
                if (checkBlock(chars[i],createVector(0,-1)).strength<3){//check that it is killable.
                blx[chars[i].pos.y-1][chars[i].pos.x] = {
                    pix: 5,
                    strength: blocks[5].strength,
                    type: blocks[5].name,
                    walkable: blocks[5].walkable
                };
                }
                }
                if (chars[i].pos.x-1<levels[curLevel][0].length&&chars[i].pos.y<levels[curLevel].length) {//chack that the clock is on the map.
                if (checkBlock(chars[i],createVector(-1,0)).strength<3){//check that it is killable.
                blx[chars[i].pos.y][chars[i].pos.x-1] = {
                    pix: 5,
                    strength: blocks[5].strength,
                    type: blocks[5].name,
                    walkable: blocks[5].walkable
                };
                }
                }
                blx[chars[i].pos.y][chars[i].pos.x] = {
                    pix: 5,
                    strength: blocks[5].strength,
                    type: blocks[5].name,
                    walkable: blocks[5].walkable
                };
                chars.splice(i,1);
            }//explode on you or iron
            else {
                moveCheck(i);
            }
        break;
        case 'flame':
            if (checkBlock(chars[i]).type==='wood'||checkBlock(chars[i]).type==='box'){
                blx[chars[i].pos.y+chars[i].dir.y][chars[i].pos.x+chars[i].dir.x] = {//turn to fire.
                    pix: 21,
                    strength: blocks[21].strength,
                    type: blocks[21].name,
                    walkable: blocks[21].walkable
                };
            }
            moveCheck(i);
        break;
    }
    if (go === "turn") {
        moveCheck(i);
    }
};

function moveYou(dir) {
    var move = createVector(0,0);
    if (keyCode === 38 || keyCode === UP_ARROW) {//up
        //you.pos.y-=1;
        move.set(0,-1);
    }
    if (keyCode === 40 || keyCode === DOWN_ARROW) {//down
        //you.pos.y+=1;
        move.set(0,1);
    }
    if (keyCode === 37 || keyCode === LEFT_ARROW) {//left
        //you.pos.x-=1;
        move.set(-1,0);
    }
    if (keyCode === 39 || keyCode === RIGHT_ARROW) {//right
        //you.pos.x+=1;
        move.set(1,0);
    }
    if (you.pos.x+move.x>=levels[curLevel][0].length||you.pos.y+move.y>=levels[curLevel].length||you.pos.x+move.x<0||you.pos.y+move.y<0) {//check if you are trying to move out of the map.
        return;
    }
    if (!checkBlock(you,move).walkable) {
        if (checkBlock(you,move).type!=="box"&&checkBlock(you,move).type!=="sand"){
            move.set(0,0);
        }
        else if (checkBlock(you,move).type==="sand") {
            blx[you.pos.y+move.y][you.pos.x+move.x] = {
                pix: 0,
                strength: blocks[0].strength,
                type: blocks[0].name,
                walkable: blocks[0].walkable
            };
        }
        //push block
        else if (checkBlock(you,createVector(move.x*2,move.y*2)).walkable&&checkBlock(you,createVector(move.x*2,move.y*2)).type!=='water') {//if the space (where block is going) can be moved onto, and it is not water.
            blx[you.pos.y+move.y*2][you.pos.x+move.x*2] = {
                pix: 4,
                strength: blocks[4].strength,
                type: blocks[4].name,
                walkable: blocks[4].walkable
            };
            blx[you.pos.y+move.y][you.pos.x+move.x] = {
                pix: 0,
                strength: blocks[0].strength,
                type: blocks[0].name,
                walkable: blocks[0].walkable
            };
        }
        else {
            move.set(0,0);
        }//cannot move there.
    }
    for (var i in chars) {//checks if you are moving onto an enemy
        if (you.pos.x+move.x===chars[i].pos.x&&you.pos.y+move.y===chars[i].pos.y) {
            if (chars[i].type==='rock'){
                chars[i].dir.set(move.x,move.y);
            }//change dir of rocks.
            move.set(0,0);
        }
    }
    you.pos.add(move);
    //check if you could actually move.
    if (!(move.x===0&&move.y===0)) {
        curMoves+=1;
        //move the turn enemy.
        for (var i in chars) {
            if (chars[i].type==='turn') {
                moveChar(i,0,"turn");
            }
        }
    }
    //87,83,65,68
    //38,40,37,39
};

function moveCharacters() {
    wait-=1;
    for (var i = chars.length-1; i >= 0; i--) {
        moveChar(i,wait,"normal");
    }
    if (wait === 0) {
        wait = WAIT_TIME;
        turns-=1;
        curTurns+=1;
    }
    if (turns<=0) {
        gameState = "next";
    }
};

function drawMap(level,chars) {
    push();
        translate((width-(levels[curLevel][0].length*10*pixSize))/2,(height-(levels[curLevel].length*10*pixSize))/2);
        for (var i = 0; i < level.length; i++) {
            for (var j = 0; j < level[i].length; j++) {
                image(blockPix[level[i][j].pix],j*(10*pixSize),i*(10*pixSize));
            }
        }
        for (var i = 0; i < chars.length; i ++) {
            image(blockPix[chars[i].pix],chars[i].pos.x*10*pixSize,chars[i].pos.y*10*pixSize);
            //draw arrows
            if (chars[i].dir.y<0) {
                image(upArrow,(chars[i].pos.x*10+3)*pixSize,(chars[i].pos.y*10-1)*pixSize);
            }
            if (chars[i].dir.y>0) {
                image(downArrow,(chars[i].pos.x*10+4)*pixSize,(chars[i].pos.y*10+8)*pixSize);
            }
            if (chars[i].dir.x<0) {
                image(leftArrow,(chars[i].pos.x*10-1)*pixSize,(chars[i].pos.y*10+4)*pixSize);
            }
            if (chars[i].dir.x>0) {
                image(rightArrow,(chars[i].pos.x*10+8)*pixSize,(chars[i].pos.y*10+4)*pixSize);
            }
            //end draw arrows
        }
        image(blockPix[you.pix],you.pos.x*10*pixSize,you.pos.y*10*pixSize);//draw you
    pop();
};

function drawHud() {
    fill (166, 164, 161);
    textAlign(CENTER,TOP);
    //top text (totals)
    text ("Turns: "+turns,width/2-50,5);
    text ("Points: "+points,width/2+50,5);
    text ("Citizens saved: "+roundCitizens,width/2,25);

    //level scores (bottom)
    textAlign(CENTER,BOTTOM);
    fill (102, 101, 100);
    text ("Turns: "+curTurns,width/2-100,height-5);
    text ("Points: "+curPoints,width/2+100,height-5);
    text ("Citizens:"+curCitizens,width/2,height-5);
    text ("Level scores:",width/2,height-25);
};

function overCanvas(){
  return mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height;
}

function keyReleased() {
  if (overCanvas()) {
    if ((keyCode === 67 || keyCode === 191)&&gameSpeed<20) {//C (can reseset speed even if you are not in a level.
        gameSpeed = 3;
        frameRate(gameSpeed);
    }
    if (gameState === "game") {
        moveYou();
        drawMap(blx,chars);
        if (keyCode === 27||keyCode === 32||keyCode === 13 || keyCode===ENTER || keyCode===RETURN) {//esc or space or enter
            gameState = "pause";
            menuSelected = 0;
            return false;
        }
        //change game speed.
        if ((keyCode === 88 || keyCode === 190)&&gameSpeed<20) {//x
            gameSpeed+=1;
            frameRate(gameSpeed);
        }
        if ((keyCode === 90 || keyCode === 188)&&gameSpeed>3) {//z
            gameSpeed-=1;
            frameRate(gameSpeed);
        }
    }
    if (gameState === "pause") {//remove menu lag problem.
        drawMap(blx,chars);
        fill (36, 28, 22,225);
        noStroke();
        rect(-1,-1,width+2,height+2);
    }
    if (gameState === "menu"||gameState === "pause") {
        if ((keyCode === 38 || keyCode === UP_ARROW)&&menuSelected>0) {//up
            menuSelected-=1;
        }
        if ((keyCode === 40 || keyCode === DOWN_ARROW)&&menuSelected<menuTexts.length-1) {//down
            menuSelected+=1;
        }
        if (keyCode === 13 || keyCode === 32 || keyCode===ENTER || keyCode===RETURN) {//space or enter
            if (menuSelected===0){
                gameState="game";
                menuSelected = 0;
                if (menuTime===0) {
                    menuTime=1;
                }
                return false;
            }
            if (menuSelected===1){
                turns += curTurns;
                roundCitizens -= curCitizens;//take off the citizens you saved this level, because you are restarting.
                totalCitizens -= curCitizens;
                turns-=5;
                resetLevel();
                gameState="game";
                menuSelected = 0;
            }
            if (menuSelected===2){
                saveGame();
            }
            if (menuSelected===3){
                gameState = "help";
                return false;
            }
        }
        //redraw menu to remove the appearance of lag.
        if (gameState ==="menu") {//remove redraw on pause.
            background(36, 28, 22);
        }
        drawMenu();
    }
    if (gameState === "next") {
        if ((keyCode === 38 || keyCode === UP_ARROW)&&menuSelected>0) {//up
            menuSelected-=1;
        }
        if ((keyCode === 40 || keyCode === DOWN_ARROW)&&menuSelected<menuTexts.length-1) {//down
            menuSelected+=1;
        }
        if (keyCode === 13 || keyCode===32 || keyCode===ENTER || keyCode===RETURN) {//space or enter
            if (menuSelected===0){
                gameState="game";
                menuSelected = 0;
                nextLevel();
                return false;
            }
            if (menuSelected===1){
                turns += curTurns;
                roundCitizens -= curCitizens;//take off the citizens you saved this level, because you are restarting.
                totalCitizens -= curCitizens;
                turns-=5;
                resetLevel();
                gameState="game";
                menuSelected = 0;
            }
            if (menuSelected===2){
                saveGame();
            }
            if (menuSelected===3){
                gameState = "help";
                return false;
            }
        }
        background(36, 28, 22);
        drawNext();
    }
    if (gameState === "help") {
        if (keyCode === 32 || keyCode === 13 || keyCode===ENTER || keyCode===RETURN) {//space or enter
            gameState="menu";
            helpPage = 1;
            return false;
        }
        if (keyCode === 37 && helpPage>1) {//left
            helpPage-=1;
        }
        if (keyCode === 39) {//right
            if (helpPage<3) {
                helpPage+=1;
            }
            else {
                gameState = "menu";
                helpPage = 1;
                return false;
            }
        }
        if (keyCode === 73) {//for saving
            gameState = "pick";
        }
        background(36, 28, 22);
        drawHelp();
    }
  }
  else {
    drawMouseNotice();
  }
};

// Prevent key stealing
function keyPressed() {
  // Only block keys if the moust is on the canvas
  if (overCanvas()) {
    return false;
  }
}
function mouseMoved() {
  // If the mouse is over the canvas or the game is not loaded.
  if (overCanvas() && paused) {
    loop();
    paused = false;
  }
  if (loadImageNum>=blocks.length && !overCanvas() && !paused) {
    noLoop();
    paused = true;
  }
}

var loadImageNum = 0;
function draw() {
    if (loadImageNum<blocks.length) {
        background(255, 255, 255);
        textAlign(CENTER,CENTER);
        textSize(12);
        fill (0, 0, 0);
        text("loading, please wait, this may take a while...",width/2,height/2);
        fill (186, 182, 186);
        textSize(10);
        text("If it isn't finished after a minute, PLEASE let me know in the tips and thanks, so I can try to find a solution.",width/2-150,height/2+100,300,100);
        noStroke();
        fill (186, 186, 186);
        rect (width/2-100,height/2+20,200,20);
        fill (107, 106, 125);
        rect (width/2-100,height/2+20,map(loadImageNum,0,blocks.length,0,200),20);
        blockPix.push(pixelsToImage(blocks[loadImageNum].pixels,pixSize,10,10));
        if (loadImageNum+1===blocks.length) {
            blockPix.push(pixelsToImage([-7570344,-7570344,-7570344,-10267828,-7967656,-3691384,-7570344,-2437730,-7570344,-3694206,-3694206,-7967656,-2437730,-3694206,-7967656,-3694206,-7967656,-7570344,-10267828,-7570344,-7967656,-3694206,-7967656,-12570321,-3694206,-2437730,-7967656,-10267828,-7967656,-3691384,-2437730,-10267828,-3694206,-10267828,-12570321,-7967656,-12570321,-7967656,-12570321,-2437730,-7570344,-3694206,-7967656,-12570321,-7967656,-10267828,-10267828,-12570321,-12570321,-7570344,-7570344,-7967656,-10267828,-3694206,-7967656,-12570321,-10267828,-10267828,-3694206,-3694206,-7570344,-7967656,-12570321,-10267828,-12570321,-7967656,-12570321,-10267828,-7967656,-10267828,-7967656,-10267828,-10267828,-7967656,-10267828,-7967656,-12570321,-2437730,-7967656,-7570344,-7570344,-3694206,-7967656,-7967656,-3691384,-2437730,-10267828,-7570344,-10267828,-7570344,-2437730,-10267828,-7967656,-3691384,-7967656,-7967656,-7967656,-7570344,-3694206,-7570344],pixSize,10,10));//add explosion image
            frameRate(gameSpeed);//put rate back to good.
        }
        loadImageNum+=1;
        return;
    }
    background(36, 28, 22);
    if (gameState === 'next') {
        drawNext();
    }
    if (gameState === 'menu') {
        drawMenu();
    }
    if (gameState === 'pause') {
        drawMap(blx,chars);
        fill (36, 28, 22,225);
        noStroke();
        rect(-1,-1,width+2,height+2);
        drawMenu();
    }
    if (gameState === 'help') {
        drawHelp();
    }
    if (gameState === 'game') {
        moveCharacters();
        drawMap(blx,chars);
        drawHud();
    }
    if (gameState === 'pick') {
        image (pixelsToImage(blocks[18].pixels,10,10,10),width/2-50,height/2-50);
    }
};
